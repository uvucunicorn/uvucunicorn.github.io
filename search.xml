<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【java学习】自动装箱与自动拆箱</title>
      <link href="/2023/03/07/java-xue-xi-zi-dong-zhuang-xiang-yu-zi-dong-chai-xiang/"/>
      <url>/2023/03/07/java-xue-xi-zi-dong-zhuang-xiang-yu-zi-dong-chai-xiang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有道词典反爬的破解的实践</title>
      <link href="/2023/03/07/you-dao-ci-dian-fan-pa-de-po-jie-de-shi-jian/"/>
      <url>/2023/03/07/you-dao-ci-dian-fan-pa-de-po-jie-de-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="有道词典反爬的破解的实践"><a class="markdownIt-Anchor" href="#有道词典反爬的破解的实践">#</a> 有道词典反爬的破解的实践</h1><p>原文章:<a href="https://blog.csdn.net/sinat_38068807/article/details/89537251%7Dhttps://blog.csdn.net/sinat_38068807/article/details/89537251"> 有道词典反爬的破解</a></p><p>直接复制了代码实践后发现用不了，然后改了几个地方就好了。</p><p>1. 首先要把 requests 包导入</p><p>打开 cmd，输入 pip install requests，然后就会安装了</p><p>2.header 里面的东西都要对照实际网页更改，</p><p>这个是 post 网页，f12 后会在 method 下面出现，如果浏览器没有出现 method，需要在 name 上面右键勾选 method（注意有多个 post，可以通过查看 preview 的方式检查是否是自己想要的 post）<img src="../images/20210625164453237.png" alt="img"></p><p>3.data_dic 也是一样的道理</p><p>4. 最后的发起请求（刚试了下，不改以可以用）</p><p>response = <a href="https://so.csdn.net/so/search?q=urllib&amp;spm=1001.2101.3001.7020">urllib</a>.request.urlopen(url=url,data=data_dic,headers=headers)</p><p>5. 然后就可以用了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> random <span class="token comment"># 生成md5字符串</span><span class="token keyword">def</span> <span class="token function">getMd5</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> hashlib    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'Utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    md5_str <span class="token operator">=</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> md5_str <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#输入单词</span>    keyword <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'翻译的单词：'</span><span class="token punctuation">)</span>     <span class="token comment">#生成salt的值</span>    r <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    salt <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">#生成sign</span>    value <span class="token operator">=</span> <span class="token string">"fanyideskweb"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> salt <span class="token operator">+</span> <span class="token string">"@6f#X3=cCuncYssPsuRUE"</span>    md5_str <span class="token operator">=</span> getMd5<span class="token punctuation">(</span>value<span class="token punctuation">)</span>     <span class="token comment">#生成header</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'OUTFOX_SEARCH_USER_ID=1910557970@10.169.0.81; JSESSIONID=aaaUW0zMQIfoubwd3ccPx; OUTFOX_SEARCH_USER_ID_NCOO=743955758.2219113; ___rl__test__cookies=1624608366784'</span><span class="token punctuation">,</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'fanyi.youdao.com'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://fanyi.youdao.com'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://fanyi.youdao.com/'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4512.6 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span>    <span class="token punctuation">}</span>     <span class="token comment">#生成表单数据</span>    data_dic <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'i'</span><span class="token punctuation">:</span> keyword<span class="token punctuation">,</span>        <span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'AUTO'</span><span class="token punctuation">,</span>        <span class="token string">'to'</span><span class="token punctuation">:</span> <span class="token string">'AUTO'</span><span class="token punctuation">,</span>        <span class="token string">'smartresult'</span><span class="token punctuation">:</span> <span class="token string">'dict'</span><span class="token punctuation">,</span>        <span class="token string">'client'</span><span class="token punctuation">:</span> <span class="token string">'fanyideskweb'</span><span class="token punctuation">,</span>        <span class="token string">'salt'</span><span class="token punctuation">:</span> salt<span class="token punctuation">,</span>        <span class="token string">'sign'</span><span class="token punctuation">:</span> md5_str<span class="token punctuation">,</span>        <span class="token string">'ts'</span><span class="token punctuation">:</span> r<span class="token punctuation">,</span>        <span class="token string">'bv'</span><span class="token punctuation">:</span> <span class="token string">'21c0324b5d4f36689af9cb53e086d23b'</span><span class="token punctuation">,</span>        <span class="token string">'doctype'</span><span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>        <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token string">'2.1'</span><span class="token punctuation">,</span>        <span class="token string">'keyfrom'</span><span class="token punctuation">:</span> <span class="token string">'fanyi.web'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span> <span class="token string">'FY_BY_CLICKBUTTION'</span>    <span class="token punctuation">}</span>     <span class="token comment">#接口地址</span>    url <span class="token operator">=</span> <span class="token string">'http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule'</span>    <span class="token comment">#发起网络请求</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data_dic<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看他的图片我没找到 js 文件，后来在 post 文件下 initiator 找到了 fan.min.js<img src="https://img-blog.csdnimg.cn/2021062517235148.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初学c++</title>
      <link href="/2023/03/07/chu-xue-c/"/>
      <url>/2023/03/07/chu-xue-c/</url>
      
        <content type="html"><![CDATA[<h1 id="c基础入门"><a class="markdownIt-Anchor" href="#c基础入门">#</a> C++ 基础入门</h1><h2 id="1-c初识根据黑马视频入门"><a class="markdownIt-Anchor" href="#1-c初识根据黑马视频入门">#</a> 1 C++ 初识（根据黑马视频入门）</h2><p>安装环境，上网找到破解的激活码</p><pre class="line-numbers language-none"><code class="language-none">Vs2022激活码：Pro:TD244-P4NB7-YQ6XK-Y8MMM-YWV2JEnterprise:VHF9H-NXBBB-638P6-6JHCY-88JWH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>阶段</th><th>内容</th><th>目标</th><th>案例</th></tr></thead><tbody><tr><td>第一阶段</td><td>C++ 基础语法入门</td><td>对 C++ 有初步了解，能够有基础编程能力</td><td>通讯录管理系统</td></tr><tr><td>第二阶段</td><td>C++ 核心编程</td><td>介绍 C++ 面向对象编程，为大型项目做铺垫</td><td>职工管理系统</td></tr><tr><td>第三阶段</td><td>C++ 提高编程</td><td>介绍 C++ 泛型编程思想，以及 STL 的基本使用</td><td>演讲比赛系统</td></tr></tbody></table><ul><li>综合大案例：机房预约系统</li></ul><h3 id="11编写代码"><a class="markdownIt-Anchor" href="#11编写代码">#</a> 1.1 编写代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main(){cout &lt;&lt; "hello world" &lt;&lt; endl;system("pause");//直接相当于在cmd中输入字符串中的内容，不包含引号return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么会调出黑窗口呢？</p></blockquote><h3 id="12-数据类型"><a class="markdownIt-Anchor" href="#12-数据类型">#</a> 1.2 数据类型</h3><h4 id="121整型"><a class="markdownIt-Anchor" href="#121整型">#</a> 1.2.1 整型</h4><p>C++ 中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short (短整型)</td><td>2 字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int (整型)</td><td>4 字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long (长整形)</td><td>Windows 为 4 字节，Linux 为 4 字节 (32 位)，8 字节 (64 位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long (长长整形)</td><td>8 字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><blockquote><p>当超出范围就会出现数值异常，但是程序不一定会报错</p><p>int 和 long，主要区别就在与系统上，如果在 linux（64 位）上，int 为 4 字节，long 为 8 字节</p></blockquote><h4 id="122实型浮点型"><a class="markdownIt-Anchor" href="#122实型浮点型">#</a> 1.2.2 实型（浮点型）</h4><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>7 位有效数字</td></tr><tr><td>double</td><td>8 字节</td><td>15～16 位有效数字</td></tr></tbody></table><blockquote><p>好像是说打印超出范围的数值没有意义，因为他只会给你显示 6 位数</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float f1 = 3.14f；//如果不加f，默认小数为double，即3.14为double类型，再用float接收，中间会有一个转换的过程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="123字符型"><a class="markdownIt-Anchor" href="#123字符型">#</a> 1.2.3 字符型</h4><blockquote><p>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCⅡ 编码放入存储单元</p><p>用 int 强转即可看到对应的 ASCⅡ 码值</p></blockquote><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h4 id="124-转义字符"><a class="markdownIt-Anchor" href="#124-转义字符">#</a> 1.2.4 转义字符</h4><p>** 作用：** 用于表示一些不能显示出来的 ASCII 字符</p><p>现阶段我们常用的转义字符有： <code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong> 码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格 (BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页 (FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行 (LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车 (CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表 (HT)  （跳到下一个 TAB 位置）</strong>（加上制表符前面的字符一共占据八个位置）</td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表 (VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符 ""</strong></td><td><strong>092</strong></td></tr><tr><td>’</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字 0</td><td>000</td></tr><tr><td>\ddd</td><td>8 进制转义字符，d 范围 0~7</td><td>3 位 8 进制</td></tr><tr><td>\xhh</td><td>16 进制转义字符，h 范围 0<sub>9，a</sub>f，A~F</td><td>3 位 16 进制</td></tr></tbody></table><h2 id="2运算符"><a class="markdownIt-Anchor" href="#2运算符">#</a> 2 运算符</h2><p>两个整数做运算，结果依然是整数，会舍掉小数的部分</p><p>小数不允许做取模运算，单个的都不可以</p><blockquote><p>前置递增和后置递增</p></blockquote><p><ins>a 和 a</ins> 的区别:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main() {int a = 5;int b = a++ * 10;先将a*10，再赋值给b。最后将a的值加一赋值给acout &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; b &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋值运算符</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a /= 2//  a = a / 2;a在前面<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/2023/01/13/docker-xue-xi/"/>
      <url>/2023/01/13/docker-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="docker学习"><a class="markdownIt-Anchor" href="#docker学习">#</a> Docker 学习</h3><pre class="line-numbers language-none"><code class="language-none">#1,yum包更新到最新yum update#2,安装需要的软件包，yum-uti1提供yum-config-manager功能，另外两个是devicemapperi驱动依赖的yum install -y yum-utils device-mapper-persistent-data lvm2#3、设器yum源yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo#4、安装docker,出现输入的界面按yyum install -y docker-ce#5、查看docker板本，检证是验证成功docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置镜像加速器"><a class="markdownIt-Anchor" href="#配置镜像加速器">#</a> 配置镜像加速器</h4><h5 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始">#</a> 快速开始</h5><pre class="line-numbers language-none"><code class="language-none">登录阿里云https://www.aliyun.com/，进入控制台，点击左上角面包图标，搜索镜像，下面的服务中选择容器镜像服务，进入之后，镜像工具中选择镜像加速器。之后就可以看到自己的镜像加速器（每个人的镜像加速都是不一样的）官方有操作文档，代码直接写好的，直接复制就好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>USTC: 中科大镜像加速器（<a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a>）<br>阿里云<br>网易云<br>腾讯云</p><h4 id="docker服务相关命令"><a class="markdownIt-Anchor" href="#docker服务相关命令">#</a> Docker 服务相关命令</h4><pre class="line-numbers language-none"><code class="language-none">启动docker服务：systemetl start docker●停止docker服务：systemctl stop docker·重启docker服务：systemetl restart docker●查看docker服务状态systemctl status docker●设置开机启动docker服务：systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker镜像相关命令"><a class="markdownIt-Anchor" href="#docker镜像相关命令">#</a> Docker 镜像相关命令</h4><pre class="line-numbers language-none"><code class="language-none">查看镜像：查看本地所有的镜像docker imagesdocker1 nages-g#查看所川镜像的id●搜索镜像：从网络中查找需要的镜像docker se色arch镜像名称·拉取镜像：从Dokr仓库下载镜像到本地，镜像名称格式为名称：版本号，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去docker hub搜索对应镜像查看.docker pul.1镜像名称删除镜像：删除本地镜像docker rmi 镜像id    #删除指定本地镜像docker rmi `dock images -q`  #删除所有本地镜像(相当于将引号内的获取的值作为参数)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker容器相关命令"><a class="markdownIt-Anchor" href="#docker容器相关命令">#</a> Docker 容器相关命令</h4><pre class="line-numbers language-none"><code class="language-none">·查看容器docker ps#查看正在运行的容器docker ps-a#查看所有容器创建并启动容器docker run参数参数说明：-:保持容器运行。通常与-t同时使用。加入t这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。·:为容器重新分配一个伪输入终端，通常与-同时使用。·-d:以守护（后台）模式运行容器。创健一个容器在后台运行，需要使用docker exec进入容器。退出后，容器不会关闭.-it创建的容器一般称为交互式容器，d创建的容器一般称为守护式容器-name:为创建的容器命名。进入容器docker exec参数#退出容器，容器不会关闭·停止容器docker stop容器名称·启动容器docker start容器名称删除容器：如果容器是运行状态则册除失败，需要停止容器才能删除docker rm容器名称查看容器信息docker inspect容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github pro相关</title>
      <link href="/2022/12/07/github-pro-xiang-guan/"/>
      <url>/2022/12/07/github-pro-xiang-guan/</url>
      
        <content type="html"><![CDATA[<p>colicate</p><p>在登陆账户的时候，报错无法登录 github 账号</p><p>解决办法是配置 idea http 代理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1块钱注册ChatGPT</title>
      <link href="/2022/12/06/1-kuai-qian-zhu-ce-chatgpt/"/>
      <url>/2022/12/06/1-kuai-qian-zhu-ce-chatgpt/</url>
      
        <content type="html"><![CDATA[<h1 id="1块钱注册chatgpt"><a class="markdownIt-Anchor" href="#1块钱注册chatgpt">#</a> 1 块钱注册 ChatGPT</h1><h2 id="1注册"><a class="markdownIt-Anchor" href="#1注册">#</a> 1. 注册</h2><pre class="line-numbers language-none"><code class="language-none">按照提示注册openai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="条件"><a class="markdownIt-Anchor" href="#条件">#</a> 条件</h4><pre class="line-numbers language-none"><code class="language-none">1.能正常访问google2.拥有外国手机号或者1块钱进入sms-activate.org使用虚拟手机号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1先进入网址按照提示注册当需要手机号的时候进入下一步"><a class="markdownIt-Anchor" href="#1先进入网址按照提示注册当需要手机号的时候进入下一步">#</a> 1. 先进入<a href="https://chat.openai.com/">网址</a>按照提示注册，当需要手机号的时候进入下一步</h5><h5 id="2sms-activateorg"><a class="markdownIt-Anchor" href="#2sms-activateorg">#</a> <a href="http://2.sms-activate.org">2.sms-activate.org</a></h5><pre class="line-numbers language-none"><code class="language-none">在左侧选择openai服务购买手机号（时限20分钟）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2遇到的问题"><a class="markdownIt-Anchor" href="#2遇到的问题">#</a> 2. 遇到的问题</h2><ol><li>有时候会遇到这种情况<br><img src="https://uvucunicorn.github.io/images/839RMEQ3DGT8EM6W86.png" alt=""></li><li>解决办法:<br>2.1 将 clash 改成全局<br> 2.2  清除浏览器缓存<br> 2.3 刷新重进</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/2022/11/19/git-xue-xi/"/>
      <url>/2022/11/19/git-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="git学习"><a class="markdownIt-Anchor" href="#git学习">#</a> Git 学习</h3><p>三个区</p><pre class="line-numbers language-none"><code class="language-none">工作区暂存区版本库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">未跟踪（untracked）已跟踪： 未修改<span class="token punctuation">(</span>unmodifly<span class="token punctuation">)</span>已修改<span class="token punctuation">(</span>modify<span class="token punctuation">)</span>已跟踪（git显示new file）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四个方面</p><p>1. 本地仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span><span class="token comment">#将工作区的文件提交到暂存区</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"第一次提交"</span> 我的文件<span class="token comment">#将暂存区的文件提交到版本库</span><span class="token function">git</span> status<span class="token comment">#查看文件状态。</span><span class="token function">git</span> log<span class="token comment">#查看日志</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 版本号 <span class="token comment">#版本回退。版本号可以从log中获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2. 远程仓库</p><pre class="line-numbers language-none"><code class="language-none">git remote#查看是否关联了远程仓库git remote -v #查看具体远程仓库git remote add#添加远程仓库git push#从远程仓库推送（上传）代码git pull#从远程仓库拉取代码git clone#从远程仓库克隆代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3. 分支（branch）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch<span class="token comment">#查看分支</span><span class="token function">git</span> branch 分支名<span class="token comment">#创建分支</span><span class="token function">git</span> checkout 分支名<span class="token comment">#切换分支</span><span class="token function">git</span> merge 分支名<span class="token comment">#将当前分支与分支名合并</span><span class="token function">git</span> push 分支名<span class="token comment">#推送分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4. 标签（tag）</p><pre class="line-numbers language-none"><code class="language-none">git tag#查看标签git tag 标签名#创建标签git checkout -b 分支名 标签名#要切换标签必须创建分支git push#将标签上传<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题"><a class="markdownIt-Anchor" href="#问题">#</a> 问题</h4><ol><li>git push 推送失败</li></ol><h5 id="1思路"><a class="markdownIt-Anchor" href="#1思路">#</a> 1. 思路</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先pull下来再push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2解决过程"><a class="markdownIt-Anchor" href="#2解决过程">#</a> 2. 解决过程</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">提示说pull下来再推送就好了<span class="token operator">&gt;</span> <span class="token function">git</span> pull origin master然后依然报错<span class="token operator">&gt;</span>fatal: refusing to merge unrelated histories在后面添加参数就好了<span class="token operator">&gt;</span> <span class="token function">git</span> pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3快捷解决"><a class="markdownIt-Anchor" href="#3快捷解决">#</a> 3. 快捷解决</h5><p>输入下面两行指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories<span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4报错原因"><a class="markdownIt-Anchor" href="#4报错原因">#</a> 4. 报错原因</h5><p>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错</p><blockquote><p>（fatal: refusing to merge unrelated histories）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="/2022/11/18/redis-xue-xi/"/>
      <url>/2022/11/18/redis-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="redis学习"><a class="markdownIt-Anchor" href="#redis学习">#</a> Redis 学习</h3><p>字符串 string 操作命令</p><ul><li>set key value    设置 key-value（如果 key 一致，则会覆盖之前的）</li><li>get key    获取 value</li><li>setex key seconds value    一段时间后清除 key-value</li><li>setnx key value    当 key 不存在时设置值（如果 key 已经存在则设置不了值）</li></ul><p>哈希 hash 操作命令</p><ul><li>HSET key field value    将哈希表 key 中的字段 field 的值设为 value</li><li>HGET key field    获取指定 key，field 的值</li><li>HDEL key field    删除指定 key，field 的值</li><li>HKEYS key    获取所有字段</li><li>HVALS key    获取所有值</li><li>HGETALL key    获取所有字段所有值</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="/2022/11/18/vue-xue-xi/"/>
      <url>/2022/11/18/vue-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="vue学习"><a class="markdownIt-Anchor" href="#vue学习">#</a> Vue 学习</h3><p>如何运行别人的项目</p><p>1. 全局配置</p><pre class="line-numbers language-none"><code class="language-none">下载nodenode -vnpm-v淘宝镜像npm install  -g cnpm -registry=https://registrynpm.taobao.orgcnpm install -g @vue/cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2. 进入项目配置准备工作就绪，开始使用项目，</p><pre class="line-numbers language-none"><code class="language-none">npm inpm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习</title>
      <link href="/2022/11/18/linux-xue-xi/"/>
      <url>/2022/11/18/linux-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="linux学习"><a class="markdownIt-Anchor" href="#linux学习">#</a> Linux 学习</h3><h4 id="网卡设置"><a class="markdownIt-Anchor" href="#网卡设置">#</a> 网卡设置</h4><p>修改网络初始化设置，设定网卡在系统启动时初始化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/sysconfig/network-scripts<span class="token function">vi</span> ifcfg-ens33<span class="token comment">#到这里已经配置完成，然后重启</span><span class="token function">ip</span> a<span class="token comment">#查看ip地址确认是否成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ssh 连接</p><h4 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令">#</a> 常用命令</h4><h5 id="文件目录操作命令"><a class="markdownIt-Anchor" href="#文件目录操作命令">#</a> 文件目录操作命令</h5><h6 id="touch"><a class="markdownIt-Anchor" href="#touch">#</a> touch</h6><pre class="line-numbers language-none"><code class="language-none">touch：创建一个空白的文本文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="more"><a class="markdownIt-Anchor" href="#more">#</a> more</h6><pre class="line-numbers language-none"><code class="language-none">语法：more fileName操作说明:回车键#向下滚动一行空格键#向下滚动一屏b#返回上一屏q或ctrl+c#退出more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="tail"><a class="markdownIt-Anchor" href="#tail">#</a> tail</h6><pre class="line-numbers language-none"><code class="language-none">语法：tail [-f] fileName说明：-f:动态读取文件末尾内容并显示，通常用于日志文件的内容输出举例：tail /etc/profile#显示/etc目录下的profile文件末尾10行的内容tail -20 /etc/profile#显示/etc目录下的profile文件末尾20行的内容tail -f /itcast/my.log#动态读取/itcast目录下的my.log文件末尾内容并显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="mkdir"><a class="markdownIt-Anchor" href="#mkdir">#</a> mkdir</h6><pre class="line-numbers language-none"><code class="language-none">1. 文件目录操作命令mkdir2. 作用:创建目录3. 语法: mkdir [-p] dirName4. 说明:   -p:确保目录名称存在,不存在的就创建一个。通过此选项,&lt;u&gt;可以实现多层目录同时创建&lt;/u&gt;   举例:   mkdir itcast #在当前目录下,建立一个名为itcast的子目录   mkdir -p itcast/test #在工作目录下的itcast目录中建立一个名为test的子目录,若itcast目录不存在,则建立一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="rm"><a class="markdownIt-Anchor" href="#rm">#</a> rm</h6><pre class="line-numbers language-none"><code class="language-none">1. 文件目录操作命令rmdir2. 作用:删除空目录3. 语法: rmdir [-p] dirName4. 说明:   -p:当子目录被删除后使父目录为空目录的话,则一并删除   -r:删除文件夹   -f:强制删除文件，不会弹出提示   rm命令支持通配符*，用来做模糊匹配符号*表示通配符，即匹配任意内容（包含空），示例：test*:表示匹配任何以test开头的内容*test:表示匹配任何以test结尾的内容*test*:表示匹配任何包含test的内容5. 举例:   rmdir itcast 删除名为itcast的空目录   rmdir -p itcast/test 删除itcast目录中名为test的子目录,若test目录删除后itcast目录变为空目录,则也被删除   rmdir itcast* 删除名称以itcast开始的空目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="tar"><a class="markdownIt-Anchor" href="#tar">#</a> tar</h6><pre class="line-numbers language-none"><code class="language-none">作用：打包压缩使用方法：tar [-zcxvf] filename [files]filename：生成的文件名files：要打包的文件后缀为.tar表示知识完成了打包，并没有压缩后缀为.tar.gz表示打包的同时还进行了压缩说明：- -z：z代表的是gzip，通过gzio命令处理文件，gzip可以对文件压缩或者解压- -c：c代表的是create，创建新的包文件- -x：x代表的是extrace，实现从包文件中还原文件- -v：v代表的是verbose，显示命令的执行过程- -f：f代表的是file，用于指定包文件的名称实例&gt; tar -zxvf hello.tar.gz -C /usr/local将hello.tar.gz文件进行解压，并将解压后的文件放在/usr/local目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找命令"><a class="markdownIt-Anchor" href="#查找命令">#</a> 查找命令</h4><h5 id="find在指定目录下查找文件"><a class="markdownIt-Anchor" href="#find在指定目录下查找文件">#</a> find：在指定目录下查找文件</h5><p>语法：find dirName -option fileName</p><p>举例</p><ul><li>find . -name “*.java”在当前目录及其子目录下查找.java 文件结尾的文件</li><li>find /itcast -name “*.java”    在 /itcast 目录及其子目录下查找.java 结尾的文件</li></ul><h5 id="grep从指定文件中查找指定的文本内容"><a class="markdownIt-Anchor" href="#grep从指定文件中查找指定的文本内容">#</a> grep：从指定文件中查找指定的文本内容</h5><p>语法：grep word fileName</p><p>举例：</p><ul><li>grep Hello HelloWorld.java    查找 HelloWorld.java 中出现的 Hello 字符串的位置</li><li>grep hello *.java    查找当前目录中所有.java 结尾的文件中包含 hello 字符串的结尾</li></ul><h5 id="ps查看进程通过ps-ef可以查看当前运行的所有进程的详细信息"><a class="markdownIt-Anchor" href="#ps查看进程通过ps-ef可以查看当前运行的所有进程的详细信息">#</a> ps：查看进程，通过 ps -ef 可以查看当前运行的所有进程的详细信息</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>"|" 在 linux 中成为管道符，可以将前一个命令的输出作为后一个命令的输入</p><p>grep 用于查看特定进程</p><ul><li></li></ul><h3 id="vim编辑器"><a class="markdownIt-Anchor" href="#vim编辑器">#</a> vim 编辑器</h3><ol><li><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>针对vim中的三种模式说明如下:</pre></td></tr><tr><td data-num="2"></td><td><pre>底行模式</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">1</span>. 底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">2</span>. 在命令模式下按下<span class="token punctuation">[</span>:,/<span class="token punctuation">]</span>任意一个，可以进入底行模式</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">3</span>. 通过/方式进入底行模式后，可以对文件内容进行查找</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">4</span>. 通过:方式进入底行模式后，可以输入wq（保存并退出<span class="token punctuation">)</span>、q<span class="token operator">!</span><span class="token punctuation">(</span>不保存退出）、 <span class="token builtin class-name">set</span> nu<span class="token punctuation">(</span>显示行号<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span>--code￼8--<span class="token operator">&gt;</span></pre></td></tr></tbody></table></figure></li></ol><p>1. 软件安装方式</p><p>2. 安装 jdk</p><p>3. 安装 Tomcat</p><p>4. 安装 MySQL</p><p>5. 安装 lrzsz：文件上传和下载</p><pre class="line-numbers language-none"><code class="language-none">##### 1.软件安装方式1.二进制发布包安装软件已经针对具体平台编译打包发布，只要解压，修改配置即可2.rpm安装软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题3.yum安装一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题4.源码编译安装软件以源码工程的形式发布，需要自己编译打包### xshell上传文件```bash1、先查看上传文件的命令rz是否安装。终端中输入rz，如果提示找不到该命令，就要先执行yum -y install lrzsz命令。2、在终端中执行rpm -qa|grep lrzsz，查看命令是否安装成功。如果安装成功，就会显示命令的版本信息。否则就不会显示任何内容。3、安装成功后，可以先切换到保存文件的目录，切换目录的命令是cd。比如我想上传文件到usr目录下，就可以执行命令cd /usr。4、切换目录后，在终端中输入rz命令，就会弹出对话框。5、选择需要上传到服务器的文件，点击打开就会开始传输。在窗口中如果出现了“传送完毕”字样，就表示文件上传成功。6、在终端中执行ls命令，就可以看到已经上传的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装jdk"><a class="markdownIt-Anchor" href="#安装jdk">#</a> 安装 jdk</h4><pre class="line-numbers language-none"><code class="language-none">操作步骤:1、使用FinalShell自带的上传工具将jdk的二进制发布包上传到Linux jdk-8u171-linux-x64.tar.gz2、解压安装包,命令为tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local3、配置环境变量,使用vim命令修改/etc/profile文件,在文件末尾加入如下配置JAVA_HOME=/usr/local/jdk1.8.0_171PATH=$JAVA_HOME/bin:$PATH4、重新加载profile文件,使更改的配置立即生效,命令为source /etc/profile5、检查安装是否成功,命令为java -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql">#</a> 安装 MySQL</h4><p>RPM（Red-Hat Package Manager）RPM 软件包管理工具，是红帽 Linux 用于管理和按章软件的工具。</p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h5><pre class="line-numbers language-none"><code class="language-none">1.卸载与mysql冲突的mariadb数据库（centos自带）2.安装mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="操作"><a class="markdownIt-Anchor" href="#操作">#</a> 操作</h5><h6 id="1卸载软件"><a class="markdownIt-Anchor" href="#1卸载软件">#</a> 1. 卸载软件</h6><p>注意：</p><ol><li>如果安装系统中已经安装有 MySQL 数据库，安装将失败，</li><li>CentOS 自带 mariadb，与 MySQL 数据库冲突，安装也会失败。</li></ol><p>查看是否安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span><span class="token comment">#查看安装了什么软件</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mariadb<span class="token comment">#查看是否安装mariadb</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token comment">#查看是否安装mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>开始卸载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> 软件名称<span class="token comment">#卸载软件命令</span><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> mariadb-libs-5.5.60-1.el7_5.x86_64<span class="token comment">#卸载mariadb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>遇到某些软件弹出无法运行，其实是缺少 c++ 运行环境</p><p><a href="https://www.aliyundrive.com/s/WLnhdAdwCzh">软件下载</a></p><h6 id="2开始安装"><a class="markdownIt-Anchor" href="#2开始安装">#</a> 2. 开始安装</h6><ol><li>上传 mysql 安装包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> lrzsz<span class="token comment">#安装上传文件的工具</span>rz <span class="token parameter variable">-be</span><span class="token comment">#输入rz上传文件。参数说明-b, –binary 用binary的方式上传下载；-e, –escape 强制escape 所有控制字符</span><span class="token function">mkdir</span> /usr/local/mysql<span class="token comment">#创建mysql文件夹</span><span class="token function">mv</span> mysql* /usr/local/mysql <span class="token comment">#将mysql压缩包移动到mysql文件夹里</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mysql* <span class="token parameter variable">-C</span> /usr/local/mysql <span class="token comment">#将压缩包解压到刚刚创建的文件夹里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>按照顺序安装 mysql（因为有依赖问题，所以要按顺序安装）</li></ol><pre class="line-numbers language-none"><code class="language-none">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpmrpm -ivh  mysql-community-libs-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpmyum install net-toolsrpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm#下面这步跟安装mysql无关，用于升级现有软件及系统内核，亲测使用完后依旧可以使用mysqlyum update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.1 其中我按照顺序依旧报错，在安装最后一个 serve 包的时候报错 &gt; &gt;</p><blockquote><p>warning: mysql-community-server-5.7.25-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY 这个错误，</p></blockquote><p>这是因为 yum 安装了旧版本的 GPG keys 造成的</p><p>解决办法：后面加上 --force --nodeps</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm --force --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>启动 mysql</li></ol><pre class="line-numbers language-none"><code class="language-none">systemctl status mysqld#查看mysql服务状态systemctl start mysqld#启动mysql服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以设置开机时自动启动 MySQL 服务，避免每次开机启动 mysql</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable mysqld#开机启动mysql服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">netstat -tunlp#查看已经启动的服务(需要安装net-tools工具之后才可以使用)netstat -tunlp | grep mysql#通过管道符查看mysql服务是否启动ps -ef | grep mysql#查看mysql的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4. 登录 mysql，查阅临时密码</p><p>因为第一次启动，所以还没有设置密码，所以 mysql 提供了临时密码。接下来通过命令查看临时密码</p><pre class="line-numbers language-none"><code class="language-none">cat /var/log/mysqld.log#查看文件内容cat /var/log/mysqld.log | grep password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改密码</p><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p#登录mysql，使用临时密码登录#修改密码set global validate_password_length=4;#设置密码长度最低位数set global validate_password_policy=LOW;#设置密码安全等级低，便于密码可以修改成rootset password=password('root');#设置密码为root#开启访问权限grant all on *.* to 'root'@'%'identified by 'root';#%意味着所有ip都可以访问(这里是5.0的mysql，8.0的跟这个不一样)flush privileges;#MySQL8.0CREAT USER 'root'@'%'idendified by 'root';grant all privileges on *.* to 'root'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防火墙"><a class="markdownIt-Anchor" href="#防火墙">#</a> 防火墙</h3><h4 id="windows远程连接linux的redis"><a class="markdownIt-Anchor" href="#windows远程连接linux的redis">#</a> windows 远程连接 Linux 的 Redis</h4><p>开放 8080 端口</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone=public --add-port=80/tcp --permanen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开放端口之后还要使用 reload 使其生效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相关命令</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld#暂时关闭防火墙systemctl disable firewalld#永久关闭防火墙systemctl status firewalld#查看防火墙状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uvHealthy健康管理项目</title>
      <link href="/2022/11/07/ruvhealthy-jian-kang-guan-li-xiang-mu/"/>
      <url>/2022/11/07/ruvhealthy-jian-kang-guan-li-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="ruvhealthy健康管理项目"><a class="markdownIt-Anchor" href="#ruvhealthy健康管理项目">#</a> RuvHealthy 健康管理项目</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>30天自制操作系统</title>
      <link href="/2022/11/03/30-tian-zi-zhi-cao-zuo-xi-tong/"/>
      <url>/2022/11/03/30-tian-zi-zhi-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="30天自制操作系统"><a class="markdownIt-Anchor" href="#30天自制操作系统">#</a> 30 天自制操作系统</h2><p>天数根据书中写的。</p><p>自己的博客还是按自己想法写舒服。</p><h3 id="第一天"><a class="markdownIt-Anchor" href="#第一天">#</a> 第一天</h3><p>按照书中内容用 VMWare 操作</p><p>具体操作看这里：<a href="https://blog.csdn.net/qq_37437983/article/details/119461215">VMWare 虚拟机启动 img 文件</a></p><p>不过我与上面的方法有些不同，我加了一步操作</p><blockquote><p>在添加软盘的界面中，我将 CD 的” 启动时连接 “关闭，只留下了软盘的” 启动时连接 “之后成功了</p></blockquote><p>ps：现在觉得虚拟机其实也一样了，之前一直想在真机上实现，但是书中说的方法还是不会用，网上找到虚拟机的教程还是用虚拟机吧（笑）</p><h3 id="第四天"><a class="markdownIt-Anchor" href="#第四天">#</a> 第四天</h3><p>看到这里，觉得真的好难（困难）看。估计是我的基础太差了。觉得来整理一下思路比较好。慢慢看。</p><p>看到现在，感觉有好多都没看懂。得回头再多看看，发现还得从第二天开始看。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows开机自启设置和Typora快捷键</title>
      <link href="/2022/10/10/windows-kai-ji-zi-qi-she-zhi-he-typora-kuai-jie-jian/"/>
      <url>/2022/10/10/windows-kai-ji-zi-qi-she-zhi-he-typora-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="windows开机自启设置和typora快捷键"><a class="markdownIt-Anchor" href="#windows开机自启设置和typora快捷键">#</a> Windows 开机自启设置和 Typora 快捷键</h2><h3 id="常见操作"><a class="markdownIt-Anchor" href="#常见操作">#</a> 常见操作</h3><blockquote><p>因为老是上网查太麻烦，所以在这里整理一下会遇到的问题</p></blockquote><h4 id="1在-windows-10-中添加在启动时自动运行的应用"><a class="markdownIt-Anchor" href="#1在-windows-10-中添加在启动时自动运行的应用">#</a> 1. 在 Windows 10 中添加在启动时自动运行的应用</h4><pre class="line-numbers language-none"><code class="language-none">Windows 徽标键 + R键入shell:startup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2typora基本技巧"><a class="markdownIt-Anchor" href="#2typora基本技巧">#</a> 2.Typora 基本技巧</h4><h4 id="常用快捷键"><a class="markdownIt-Anchor" href="#常用快捷键">#</a> 常用快捷键</h4><ul><li>加粗：  <code>Ctrl + B</code></li><li>撤销：  <code>Ctrl + Z</code></li><li>字体倾斜 ： <code>Ctrl+I</code></li><li>下划线： <code>Ctrl+U</code></li><li>多级标题：  <code>Ctrl + 1~6</code></li><li>有序列表： <code>Ctrl + Shift + [</code></li><li>无序列表： <code>Ctrl + Shift + ]</code></li><li>降级快捷键 ： <code>Tab</code></li><li>升级快捷键： <code>Shift + Tab</code></li><li>插入链接：  <code>Ctrl + K</code></li><li>插入公式：  <code>Ctrl + Shift + M</code></li><li>行内代码：  <code>Ctrl + Shift + K</code></li><li>插入图片：  <code>Ctrl + Shift + I</code></li><li>返回 Typora 顶部： <code>Ctrl+Home</code></li><li>返回 Typora 底部 ： <code>Ctrl+End</code></li><li>创建表格 ： <code>Ctrl+T</code></li><li>选中某句话 ： <code>Ctrl+L</code></li><li>选中某个单词 ： <code>Ctrl+D</code></li><li>选中相同格式的文字 ： <code>Ctrl+E</code></li><li>搜索:  <code>Ctrl+F</code></li><li>搜索并替换 ： <code>Ctrl+H</code></li><li>删除线 ： <code>Alt+Shift+5</code></li><li>引用 ： <code>Ctrl+Shift+Q</code></li><li>生成目录： <code>[TOC]+Enter</code></li></ul><p>注：一些实体符号需要在实体符号之前加” \ ” 才能够显示</p><h4 id="菜单"><a class="markdownIt-Anchor" href="#菜单">#</a> 菜单</h4><p>输入 [TOC] 即可产生菜单，菜单会自动更新</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="/2022/10/09/springboot-xue-xi/"/>
      <url>/2022/10/09/springboot-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot学习时遇到的问题"><a class="markdownIt-Anchor" href="#springboot学习时遇到的问题">#</a> SpringBoot 学习时遇到的问题</h2><h3 id="1上传文件到私服时idea报错process-terminated"><a class="markdownIt-Anchor" href="#1上传文件到私服时idea报错process-terminated">#</a> 1. 上传文件到私服时 idea 报错 Process terminated</h3><ul><li>解决：setting.xml 文件语法错误</li><li>以后尽量用 idea 打开此文件，不用 vscode 打开</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客_Hexo_tangyuxian</title>
      <link href="/2022/10/09/da-jian-ge-ren-bo-ke-hexo-tangyuxian/"/>
      <url>/2022/10/09/da-jian-ge-ren-bo-ke-hexo-tangyuxian/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建个人博客-_hexo_tangyuxian"><a class="markdownIt-Anchor" href="#搭建个人博客-_hexo_tangyuxian">#</a> 搭建个人博客 _Hexo_tangyuxian</h2><h2 id="1博客的搭建"><a class="markdownIt-Anchor" href="#1博客的搭建">#</a> 1. 博客的搭建</h2><h2 id="2搭建中遇到的问题"><a class="markdownIt-Anchor" href="#2搭建中遇到的问题">#</a> 2. 搭建中遇到的问题</h2><h3 id="21-ssh-githubcom-失败"><a class="markdownIt-Anchor" href="#21-ssh-githubcom-失败">#</a> 2.1 ssh <a href="http://github.com">github.com</a> 失败</h3><blockquote><p>解决办法：</p><p>windows 在 C:\WINDOWS\system32\drivers\etc 目录下修改 host 文件，在最后一行添加 github 的 ip 地址</p></blockquote><blockquote><p>问题分析过程：</p><ol><li>通过指令查看在建立 ssh 连接的过程中发生了什么</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token function">ssh</span> <span class="token parameter variable">-vT</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接 github.com 的地址居然是 <code>::1</code>  和 <code>127.0.0.1</code> 。前者是 IPV6 的 localhost 地址，后 -<br> 者是 IPV4 的 localhost 地址。</p><ol start="2"><li>查找 github.com 的 ip 地址可以使用<a href="https://link.segmentfault.com/?enc=orCt1kBGvcOvlc4ba%2BINow%3D%3D.Mvyr04EUSlDAggFKSsIlqueNID43Ous1UuAsWFZ%2B0vE%3D"> https://www.ipaddress.com/</a> 来查询，也可以使用 <code>nslookup</code>  命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token function">nslookup</span> github.com <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>nslookup</code>  是域名解析工具， <code>8.8.8.8</code>  是 Google 的 DNS 服务器地址。直接使用</p><p>就会使用本机已经设置好的 DNS 服务器进行域名解析， <code>ipconfig /all</code>  可以查看本机 DNS 服务器地址。</p><p>这个问题其实就是 DNS 解析被污染了，有 2 种可能：</p><ul><li>DNS 解析被运营商劫持了</li><li>使用了科学上网工具</li></ul></blockquote><h3 id="22-hexo报错errorspawn-failed"><a class="markdownIt-Anchor" href="#22-hexo报错errorspawn-failed">#</a> 2.2 hexo 报错 error：spawn failed</h3><p>2.1 解决办法</p><p>2.1.2 删除.deploy_git 文件夹；</p><pre class="line-numbers language-none"><code class="language-none">git config --global http.sslVerify "false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2. 然后，依次执行：</p><pre class="line-numbers language-none"><code class="language-none">git config --global core.autocrlf falsehexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.1.2 原因</p><blockquote><p>问题大多是因为 git 进行 push 或者 hexo d 的时候改变了一些.deploy_git 文件下的内容。</p></blockquote><h3 id="23-上传资源之后要过两三分钟才会显示"><a class="markdownIt-Anchor" href="#23-上传资源之后要过两三分钟才会显示">#</a> 2.3 上传资源之后要过两三分钟才会显示</h3><h3 id="24本地访问失败"><a class="markdownIt-Anchor" href="#24本地访问失败">#</a> 2.4 本地访问失败</h3><blockquote><p>输入命令 hexo s</p></blockquote><p>但是访问 localhost:4000 的时候显示不出来，并且 bash 窗口中还在报错</p><p>解决办法:</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 hexo g 的过程中可能会报黄色错误，再重重头开始执行一遍命令就可以</p><h3 id="25在网页端看代码窗口不正常"><a class="markdownIt-Anchor" href="#25在网页端看代码窗口不正常">#</a> 2.5 在网页端看代码窗口不正常</h3><p>原因是我将 theme 下的一个配置文件删掉导致不成功。文件名为.gitkeep</p><h2 id="3写文章"><a class="markdownIt-Anchor" href="#3写文章">#</a> 3. 写文章</h2><h3 id="31创建文章及发布"><a class="markdownIt-Anchor" href="#31创建文章及发布">#</a> 3.1 创建文章及发布</h3><p>常见命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"博客名称"</span> <span class="token comment">#创建一篇新博客</span>hexo clean<span class="token comment">#清理缓存</span>hexo g<span class="token comment">#生成静态文件(generate)</span>hexo d<span class="token comment">#上传博客(deploy）</span>hexo s<span class="token comment">#运行服务器，网页打开localhost:4000即可预</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1. 创建新文件 / 更改文件内容后上传文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"我的新博客"</span>hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2. 删除文件后上传文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="32如何添加图片"><a class="markdownIt-Anchor" href="#32如何添加图片">#</a> 3.2 如何添加图片</h3><ol><li><p>首先将图片放在 images 文件夹中 (自己创建，路径与_posts 同一层)</p></li><li><p>然后将 images 后的图片名称改为自己的图片名称 (前面的为自己博客的地址)</p><pre class="line-numbers language-none"><code class="language-none">https://uvucunicorn.github.io/images/839RMEQ3DGT8EM6W86.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="4更换主题及配置画板娘"><a class="markdownIt-Anchor" href="#4更换主题及配置画板娘">#</a> 4. 更换主题及配置画板娘</h2><h3 id="41-更换主题"><a class="markdownIt-Anchor" href="#41-更换主题">#</a> 4.1 更换主题</h3><blockquote><ol><li>浏览主题</li><li>克隆 github 仓库地址</li><li>更改_config.yaml 主题配置信息</li></ol></blockquote><h4 id="411-地址"><a class="markdownIt-Anchor" href="#411-地址">#</a> 4.1.1 地址</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//hexo.io/themes/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(也可以选择进入 hexo 官网，拉到最底下，找到浏览主题)</p><p>点击图片可以预览效果</p><p>点击标题名称可以进入仓库地址</p><h4 id="412-克隆github仓库地址"><a class="markdownIt-Anchor" href="#412-克隆github仓库地址">#</a> 4.1.2 克隆 github 仓库地址</h4><p>选择好要更改的主题，进入 github 仓库复制仓库地址</p><p>克隆地址 (这里以<a href="https://github.com/tangyuxian"> tangyuxian</a> 为例)</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/tangyuxian/hexo-theme-tangyuxian.git themes/tangyuxian<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将中间仓库地址换为你喜欢的仓库地址，最后面的 tangyuxian 更换成你喜欢主题的名称</p><h4 id="413-更改_configyaml主题配置信息"><a class="markdownIt-Anchor" href="#413-更改_configyaml主题配置信息">#</a> 4.1.3 更改_config.yaml 主题配置信息</h4><p>找到 theme, 将后面的主题换为上一步中你更改的主题名称 (也就是克隆的文件夹名称)</p><h3 id="42添加画板娘"><a class="markdownIt-Anchor" href="#42添加画板娘">#</a> 4.2 添加画板娘</h3><p>4.2.1 安装插件</p><p>也可参阅<a href="https://github.com/tangyuxian/hexo-helper-live2d">教程</a>和<a href="https://github.com/tangyuxian/live2D">画板娘礼包</a></p><p>安装插件</p><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在_config.yaml 文件中添加如下配置信息</p><p>例子:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细版:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/EYHN/hexo-helper-live2d</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># enable: false</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># Root path of plugin to be on the site (Relative)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># JavaScript path related to plugin's root (Relative)</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># Relative model path related to plugin's root (Relative)</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># Default</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether only to replace live2d tag instead of inject to all pages</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether to show logs in console</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko <span class="token comment"># npm-module package name</span>    <span class="token comment"># use: wanko # folder name in (hexo base dir)/live2d_models/</span>    <span class="token comment"># use: ./wives/wanko # folder path relative to hexo base dir</span>    <span class="token comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # Your custom url</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通版:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/xiazeyu/live2d-widget.js</span><span class="token comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">hHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.5</span>    <span class="token key atrule">vHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.618</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">superSample</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">-20</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>    <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2.2 下载画板娘以及配置</p><p>在博客根目录下创建目录<u>live2d_models</u>, 在目录下执行下面的命令</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/fguby/live2D.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改配置文件_config.yaml 中刚刚添加的信息中 model.use 后添加你想要使用的模型路径 (相对路径和绝对路径都可以，初学建议绝对路径)</p><p>加下来依次执行下列指令</p><pre class="line-numbers language-none"><code class="language-none">hexo ghexo dhexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果遇到报错就清理一下</p><pre class="line-numbers language-none"><code class="language-none">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id=""><a class="markdownIt-Anchor" href="#">#</a> </h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>部署项目到Linux服务器</title>
      <link href="/2022/10/05/bu-shu-xiang-mu-dao-linux-fu-wu-qi/"/>
      <url>/2022/10/05/bu-shu-xiang-mu-dao-linux-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="部署项目到linux服务器"><a class="markdownIt-Anchor" href="#部署项目到linux服务器">#</a> 部署项目到 Linux 服务器</h2><h3 id="1前端项目部署到github"><a class="markdownIt-Anchor" href="#1前端项目部署到github">#</a> 1. 前端项目部署到 GitHub</h3><ol><li>创建仓库</li><li>将整个项目文件上传到仓库</li></ol><p><a href="https://www.bilibili.com/video/BV1wT4y1Z71B/?spm_id_from=333.880.my_history.page.click">教学视频</a></p><h3 id="2java项目"><a class="markdownIt-Anchor" href="#2java项目">#</a> 2.java 项目</h3><h3 id="3springboot项目"><a class="markdownIt-Anchor" href="#3springboot项目">#</a> 3.springboot 项目</h3><h4 id="1拥有一个linux服务器"><a class="markdownIt-Anchor" href="#1拥有一个linux服务器">#</a> 1. 拥有一个 Linux 服务器，</h4><ul><li>我使用的是阿里云的服务器</li><li>操作系统使用 CentOS，选择宝塔面板。在宝塔面板上搭建 LNMP 环境（Linux、MySQL、NginxPHP）</li></ul><h4 id="2导入数据库"><a class="markdownIt-Anchor" href="#2导入数据库">#</a> 2. 导入数据库。</h4><ul><li>在数据库选项卡中选择 phpMyAdmin。<img src="https://uvucunicorn.github.io/images/JFNCIUQCMZNEBNGTVDS.png" alt=""></li></ul><pre class="line-numbers language-none"><code class="language-none">可能会进不去，在安全组中添加端口888/888，源0.0.0.0/0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3配置java环境"><a class="markdownIt-Anchor" href="#3配置java环境">#</a> 3. 配置 java 环境</h4><ul><li><p>将<a href="https://www.aliyundrive.com/s/9qgo7ajxU2D"> jdk</a> 导入到 ，没有的 java 文件夹自己创建</p><blockquote><p>/etc/local/java</p></blockquote></li><li><p>配置环境变量<br>更改 profile 文件</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下面的代码复制到</p><blockquote><p>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</p></blockquote><p>代码：</p><pre class="line-numbers language-none"><code class="language-none">JAVA_HOME=/usr/java/jdk1.8.0_221-amd64CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/libPATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/binexport PATH CLASSPATH JAVA_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如下所示：</p><p><img src="https://uvucunicorn.github.io/images/A70H%5BHESH5E9L614W6FR.png" alt=""></p></li><li><p>检查环境<br>命令行输入</p><pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><a href="https://www.aliyundrive.com/s/9qgo7ajxU2D">下载 jdk</a></p><h4 id="4上传jar包"><a class="markdownIt-Anchor" href="#4上传jar包">#</a> 4. 上传 jar 包</h4><p>将 springboot 项目打成 jar 包上传到</p><blockquote><p>/root</p></blockquote><p>命令行输入</p><pre class="line-numbers language-none"><code class="language-none">java -jar *.jar#*换成你的jar包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5创建网站"><a class="markdownIt-Anchor" href="#5创建网站">#</a> 5. 创建网站</h4><ul><li><p>进入宝塔界面，网站选项卡</p></li><li><p>只需添加站点为 ip 地址</p></li><li><p>添加反向代理<br>代理名称为</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:8080#将8080改成自己的项目运行端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提交之后即可使用</p></li><li><p>使用方法：<br>之前在本地运行的 localhost 改成现在的服务器 ip 地址即可</p></li></ul><h4 id="6更新项目"><a class="markdownIt-Anchor" href="#6更新项目">#</a> 6. 更新项目</h4><p>前提条件：之前曾经配过上面五步，想换一个项目搭建在服务器上</p><ul><li>1. 上传 jar 包，<a href="#4.%E4%B8%8A%E4%BC%A0jar%E5%8C%85">参考</a></li><li>2. 导入数据库，<a href="#2.%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82">参考</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>smart-store项目搭建</title>
      <link href="/2022/10/05/smart-store-xiang-mu-da-jian/"/>
      <url>/2022/10/05/smart-store-xiang-mu-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="smart-store项目搭建"><a class="markdownIt-Anchor" href="#smart-store项目搭建">#</a> Smart-Store 项目搭建</h1><h2 id="1后台系统业务功能开发"><a class="markdownIt-Anchor" href="#1后台系统业务功能开发">#</a> 1. 后台系统业务功能开发</h2><h3 id="11登录注册"><a class="markdownIt-Anchor" href="#11登录注册">#</a> 1.1 登录注册</h3><h3 id="12退出"><a class="markdownIt-Anchor" href="#12退出">#</a> 1.2 退出</h3><h3 id="13员工管理"><a class="markdownIt-Anchor" href="#13员工管理">#</a> 1.3 员工管理</h3><h3 id="14公共字段填充"><a class="markdownIt-Anchor" href="#14公共字段填充">#</a> 1.4 公共字段填充</h3><h3 id="15分类管理"><a class="markdownIt-Anchor" href="#15分类管理">#</a> 1.5 分类管理</h3><h3 id="16文件上传下载网页回显"><a class="markdownIt-Anchor" href="#16文件上传下载网页回显">#</a> 1.6 文件上传下载（网页回显）</h3><p>上传：</p><pre class="line-numbers language-none"><code class="language-none">通过MultFile参数接收，transferTo()方法转存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载（网页回显）：</p><pre class="line-numbers language-none"><code class="language-none">1.文件输入流接收文件名，并查找2.网页端输出流输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="17菜品管理"><a class="markdownIt-Anchor" href="#17菜品管理">#</a> 1.7 菜品管理</h3><p>添加</p><pre class="line-numbers language-none"><code class="language-none">1.添加到基本表dish2.添加到口味表flavor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除</p><h3 id="18套餐管理"><a class="markdownIt-Anchor" href="#18套餐管理">#</a> 1.8 套餐管理</h3><p>添加</p><pre class="line-numbers language-none"><code class="language-none">1.添加到基本表setmeal2.添加到附加表setmeal_dish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="19短信发送"><a class="markdownIt-Anchor" href="#19短信发送">#</a> 1.9 短信发送</h3><h3 id="110手机验证码登录"><a class="markdownIt-Anchor" href="#110手机验证码登录">#</a> 1.10 手机验证码登录</h3><h4 id="1101登录逻辑"><a class="markdownIt-Anchor" href="#1101登录逻辑">#</a> 1.10.1 登录逻辑</h4><pre class="line-numbers language-none"><code class="language-none">1.获取phone、code2.比对code是否一致3.查user是否存在4.user存在   --&gt; ruturn user  user不存在  --&gt; 创建user，设置phone  --&gt;  return user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新导入前端登录界面之后，可能出现以下情况 whitepage404</p><pre class="line-numbers language-none"><code class="language-none">maven cleanmaven complie浏览器清除缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1102代码展示"><a class="markdownIt-Anchor" href="#1102代码展示">#</a> 1.10.2 代码展示</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取手机号和验证码 * 比对验证码 * * @param map * @param session * @return */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span> map<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> phone <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> codeInSession <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>codeInSession <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> codeInSession<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getPhone</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//说明用户不存在，自动新建用户</span>            user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1103用户登出"><a class="markdownIt-Anchor" href="#1103用户登出">#</a> 1.10.3 用户登出</h4><h5 id="11031思路"><a class="markdownIt-Anchor" href="#11031思路">#</a> 1.10.3.1 思路</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">清除session中保存的当前用户登录的id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="11032代码展示"><a class="markdownIt-Anchor" href="#11032代码展示">#</a> 1.10.3.2 代码展示</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/loginout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">loginout</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"退出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问：不是很懂 MP 的 updateById。</p><p>update 与 updateByid</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AddressBook</span> addressBook<span class="token punctuation">)</span><span class="token punctuation">{</span>    addressBookService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>addressBook<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"新增成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="111菜品浏览"><a class="markdownIt-Anchor" href="#111菜品浏览">#</a> 1.11 菜品浏览</h3><h4 id="1111需求分析"><a class="markdownIt-Anchor" href="#1111需求分析">#</a> 1.11.1 需求分析</h4><pre class="line-numbers language-none"><code class="language-none">1.完成菜品展示和购物车展示<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1112需要处理的业务逻辑"><a class="markdownIt-Anchor" href="#1112需要处理的业务逻辑">#</a> 1.11.2 需要处理的业务逻辑</h4><pre class="line-numbers language-none"><code class="language-none">1.删除购物车的商品sub2.清空购物车clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1113删除购物车的商品sub"><a class="markdownIt-Anchor" href="#1113删除购物车的商品sub">#</a> 1.11.3 删除购物车的商品 sub</h4><h5 id="1思路"><a class="markdownIt-Anchor" href="#1思路">#</a> 1）思路</h5><pre class="line-numbers language-none"><code class="language-none">1.比对userid2.比对dishid/setmealid3.删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2代码展示"><a class="markdownIt-Anchor" href="#2代码展示">#</a> 2）代码展示</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除菜品 * * @param shoppingCart * @return */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sub"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ShoppingCart</span> shoppingCart<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取id</span>    <span class="token comment">//条件构造器</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shoppingCart<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span><span class="token operator">::</span><span class="token function">getDishId</span><span class="token punctuation">,</span> shoppingCart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span><span class="token operator">::</span><span class="token function">getSetmealId</span><span class="token punctuation">,</span> shoppingCart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ShoppingCart</span> shoppingCartServiceOne <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> number <span class="token operator">=</span> shoppingCartServiceOne<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//直接删除</span>        shoppingCartService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//number减一</span>        shoppingCartServiceOne<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shoppingCartService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>shoppingCartServiceOne<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>shoppingCartServiceOne<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1114清空购物车clean"><a class="markdownIt-Anchor" href="#1114清空购物车clean">#</a> 1.11.4 清空购物车 clean</h4><h5 id="1思路-2"><a class="markdownIt-Anchor" href="#1思路-2">#</a> 1）思路</h5><pre class="line-numbers language-none"><code class="language-none">删除该用户购物车的所有商品<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2代码展示-2"><a class="markdownIt-Anchor" href="#2代码展示-2">#</a> 2）代码展示</h5><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/** * 清空购物车 * @return */@DeleteMapping("/clean")public R&lt;String&gt; clean() {    log.info("删除数据");    //构造条件    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();    //比对userid    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());    //删除该用户购物车的商品    shoppingCartService.remove(queryWrapper);    return R.success("清空成功");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="112购物车"><a class="markdownIt-Anchor" href="#112购物车">#</a> 1.12 购物车</h3><h3 id="113下单"><a class="markdownIt-Anchor" href="#113下单">#</a> 1.13 下单</h3><h4 id="订单展示"><a class="markdownIt-Anchor" href="#订单展示">#</a> 订单展示</h4><h4 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h4><pre class="line-numbers language-none"><code class="language-none">总体目标：返回orderDtoPage对象，处理商品数量由于没有商品数量信息，所以我们需要查询商品数量1）将pageInfo复制到orderDtoPage，其中records不复制（因为records里面没有商品数量，所以在这里通过流的方式设置）2）用流的方式处理records，将里面所有信息复制给dto对象。3）查询商品数量，给records设置值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码展示"><a class="markdownIt-Anchor" href="#代码展示">#</a> 代码展示</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 订单展示   * @param page   * @param pageSize   * @return   */</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userPage"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&gt;</span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//构造分页构造器</span>      <span class="token class-name">Page</span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrdersDto</span><span class="token punctuation">&gt;</span></span> orderDtoPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//构建条件构造器</span>      <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Orders</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//添加排序条件</span>      queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Orders</span><span class="token operator">::</span><span class="token function">getOrderTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//进行分页查询</span>      orderService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//对象拷贝</span>      <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">,</span> orderDtoPage<span class="token punctuation">,</span> <span class="token string">"records"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Orders</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> pageInfo<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrdersDto</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>          <span class="token class-name">OrdersDto</span> ordersDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrdersDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> ordersDto<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Long</span> id <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Orders</span> orders <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> number <span class="token operator">=</span> orders<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDetail</span><span class="token punctuation">&gt;</span></span> queryWrapper1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          queryWrapper1<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">OrderDetail</span><span class="token operator">::</span><span class="token function">getOrderId</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> orderDetailService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>queryWrapper1<span class="token punctuation">)</span><span class="token punctuation">;</span>          ordersDto<span class="token punctuation">.</span><span class="token function">setSumNum</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ordersDto<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderDtoPage<span class="token punctuation">.</span><span class="token function">setRecords</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>orderDtoPage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问：不懂为什么这里 Orders 不能是 OrderDto</p><pre class="line-numbers language-none"><code class="language-none">//对象拷贝       BeanUtils.copyProperties(pageInfo, orderDtoPage, "records");       List&lt;Orders&gt; records = pageInfo.getRecords();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2redis优化"><a class="markdownIt-Anchor" href="#2redis优化">#</a> 2.Redis 优化</h2><h4 id="登录优化"><a class="markdownIt-Anchor" href="#登录优化">#</a> 登录优化</h4><h5 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2">#</a> 思路</h5><pre class="line-numbers language-none"><code class="language-none">1.将验证码存入Redis2.pom导入依赖3.重新构造序列器（原来的序列会产生类似乱码的效果，所以重新构造）RedisConfig4.登陆时从redis取出，当登录完成之后，删除redis中的验证码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码展示-2"><a class="markdownIt-Anchor" href="#代码展示-2">#</a> 代码展示</h5><p>RedisConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>unicorn<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserController</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.unicorn.controller;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.unicorn.common.R;import com.unicorn.entity.User;import com.unicorn.service.UserService;import com.unicorn.utils.ValidateCodeUtils;import lombok.extern.log4j.Log4j;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import java.util.Map;import java.util.concurrent.TimeUnit;@RestController@Slf4j@RequestMapping("/user")public class UserController {    @Autowired    private UserService userService;    @Autowired    private RedisTemplate redisTemplate;    /**     * 发送邮箱验证码     *     * @param user     * @return     */    @PostMapping("/sendMsg")    public R&lt;String&gt; sendMsg(@RequestBody User user, HttpSession session) {        // 获取邮箱账号        String phone = user.getPhone();        String subject = "smart-store登录验证码";        if (StringUtils.isNotEmpty(phone)) {            String code = ValidateCodeUtils.generateValidateCode(4).toString();            String context = "登录验证码为: " + code + ",五分钟内有效，请妥善保管![发送人：smart-store]";            log.info("code={}", code);            // 真正地发送邮箱验证码            userService.sendMsg(phone, subject, context);            //  将随机生成的验证码保存到session中//            session.setAttribute(phone,code);//将验证码存入redis中redisTemplate.opsForValue().set(phone,code,5,TimeUnit.MINUTES);            // 验证码由保存到session 优化为 缓存到Redis中，并且设置验证码的有效时间为 5分钟//            redisTemplate.opsForValue().set(phone, code, 5, TimeUnit.MINUTES);            return R.success("验证码发送成功，请及时查看!");        }        return R.error("验证码发送失败，请重新输入!");    }    /**     * 获取手机号和验证码     * 比对验证码     *     * @param map     * @param session     * @return     */    @PostMapping("/login")    public R&lt;User&gt; login(@RequestBody Map map, HttpSession session) {        String phone = map.get("phone").toString();        String code = map.get("code").toString();//        从session中获取验证码//        Object codeInSession = session.getAttribute(phone);//        从redis中获取验证码        Object codeInSession =redisTemplate.opsForValue().get(phone);        if (codeInSession != null &amp;&amp; codeInSession.equals(code)) {            LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();            queryWrapper.eq(User::getPhone, phone);            User user = userService.getOne(queryWrapper);            if (user == null) {                //说明用户不存在，自动新建用户                user = new User();                user.setPhone(phone);                user.setStatus(1);                userService.save(user);            }            session.setAttribute("user", user.getId());            //如果用户登陆成功，删除验证码            redisTemplate.delete(phone);            return R.success(user);        }        return R.error("登陆失败");    }    @PostMapping("/loginout")    public R&lt;String&gt; loginout(HttpServletRequest request) {        request.getSession().removeAttribute("user");dd        return R.success("退出成功");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询优化"><a class="markdownIt-Anchor" href="#查询优化">#</a> 查询优化</h4><p>思路</p><blockquote><p>先从 redis 中获取数据，如果没有则查询数据库存入 redis 中</p></blockquote><p>代码展示</p><h3 id="3问题"><a class="markdownIt-Anchor" href="#3问题">#</a> 3. 问题</h3><h4 id="31过滤器不生效"><a class="markdownIt-Anchor" href="#31过滤器不生效">#</a> 3.1 过滤器不生效</h4><p>加注解 @Component</p><p>原因是：（ssm 工作原理）</p><h4 id="32static静态资源无法加载"><a class="markdownIt-Anchor" href="#32static静态资源无法加载">#</a> 3.2static 静态资源无法加载</h4><p>1. 只要继承 WebConfigSupport 就会使 SpringBoot 默认配置的拦截器失效</p><p>WebMvcConfig 继承 WebMvcConfigSupport 导致 SpringBoot 中拦截器失效</p><p><a href="http://101.201.238.197/backend/page/login/login.html">项目链接</a>已失效</p><h2 id="4mysql读写分离"><a class="markdownIt-Anchor" href="#4mysql读写分离">#</a> 4.MySQL 读写分离</h2><p>数据库主从复制</p><h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3">#</a> 思路</h3><pre class="line-numbers language-none"><code class="language-none">1.主库，更改my.cnf文件，添加用户2.从库，更改my.cnf文件，与主库相连<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="41开启数据库二进制日志功能"><a class="markdownIt-Anchor" href="#41开启数据库二进制日志功能">#</a> 4.1 开启数据库二进制日志功能</h4><p>修改 MySQL 数据库配置文件 /etc/my.cnf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-bin<span class="token comment">#启用二进制日志</span>server-id<span class="token operator">=</span><span class="token number">100</span><span class="token comment">#服务器唯一ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="42重启mysql服务"><a class="markdownIt-Anchor" href="#42重启mysql服务">#</a> 4.2 重启 mysql 服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="43创建用户"><a class="markdownIt-Anchor" href="#43创建用户">#</a> 4.3 创建用户</h4><pre class="line-numbers language-none"><code class="language-none">GRANT REPLICATION SLAVE ON *.* to 'unicorn'@'%'identified by 'root@123456';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：slave 必须被 master 授权具有该权限的用户，才能通过该用户复制。</p><p>my.cnf 文件写错了的解决办法</p><p>解决思路</p><pre class="line-numbers language-none"><code class="language-none">1.查看/etc/log/2.修改重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">搞了半天，启动mysql服务失败，最后发现原因是在配置my.cnf文件的时候写错了，将=写成-，mysql无法识别。解决办法是，删了重新启动，然后再添加进去如果直接更改，反正我更改完之后依然不能使用，最后删掉重来才成功的。还是不行，发现配置信息写错了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看 master 状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show master status<span class="token punctuation">;</span><span class="token comment">#sql语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完命令后不要再执行其他操作。保证 file 和 position 不变</p><h4 id="44配置从库"><a class="markdownIt-Anchor" href="#44配置从库">#</a> 4.4 配置从库</h4><p>接下来到从库中配置 mysql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server-id<span class="token operator">=</span><span class="token number">101</span> <span class="token comment">#[必须]服务器唯一ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录 mysql 数据库，执行下列 sql</p><pre class="line-numbers language-none"><code class="language-none">change master to master_host='192.168.217.144',master_user='unicorn',master_password='root@123456',master_log_file='mysql-bin.000001',master_log_pos=154;start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show slave status<span class="token punctuation">;</span><span class="token comment">#展示从库状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示会有一大串，将其复制到文本编辑器（我用的 vscode 中）就会便于观看了。</p><p>确保其中 slave_IO_Runing 和 slave_SQL_Runing 的状态为 yes，这样就说明配置主从库成功了。</p><h4 id="配置字符集"><a class="markdownIt-Anchor" href="#配置字符集">#</a> 配置字符集</h4><pre class="line-numbers language-none"><code class="language-none">vim /etc/my.cnfcharacter-set-server = utf8mb4collation-server = utf8mb4_general_cisystemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在项目中配置主库分离sharding-jdbc"><a class="markdownIt-Anchor" href="#在项目中配置主库分离sharding-jdbc">#</a> 在项目中配置主库分离（sharding-jdbc）</h5><p>将原来项目中的数据导入主库中</p><p>1. 配置数据库</p><p>我通过 navicat 转储的 sql 文件，但是在通过 navicat 写入数据库中失败了，最后通过 cmd 连接虚拟机中 mysql，使用 source 命令成功了。</p><p>在连接数据库的时候报 ssl 错误，添加下面的参数即可成功</p><pre class="line-numbers language-none"><code class="language-none">mysql -h 192.168.217.144 -uroot -proot --ssl-mode=DISABLED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2. 导入 pom 文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        配置主从复制shardingjdbc<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>sharding<span class="token operator">-</span>jdbc<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">-</span><span class="token constant">RC1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3. 配置 yml 文件</p><p>黏贴的时候注意缩进</p><pre class="line-numbers language-none"><code class="language-none">  #主从复制shardingsphere:  datasource:    names:      master,slave    # 主数据源    master:      type: com.alibaba.druid.pool.DruidDataSource      driver-class-name: com.mysql.cj.jdbc.Driver      url: jdbc:mysql://192.168.217.144:3306/smart-store?characterEncoding=utf-8      username: root      password: root    # 从数据源    slave:      type: com.alibaba.druid.pool.DruidDataSource      driver-class-name: com.mysql.cj.jdbc.Driver      url: jdbc:mysql://192.168.217.145:3306/smart-store?characterEncoding=utf-8      username: root      password: root  masterslave:    # 读写分离配置    load-balance-algorithm-type: round_robin    # 最终的数据源名称    name: dataSource    # 主库数据源名称    master-data-source-name: master    # 从库数据源名称列表，多个逗号分隔    slave-data-source-names: slave  props:    sql:      show: true #开启SQL显示，默认falsemain:  allow-bean-definition-overriding: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5nginx学习linux环境"><a class="markdownIt-Anchor" href="#5nginx学习linux环境">#</a> 5.Nginx 学习（Linux 环境）</h2><h3 id="51思路"><a class="markdownIt-Anchor" href="#51思路">#</a> 5.1 思路</h3><h3 id="52安装过程"><a class="markdownIt-Anchor" href="#52安装过程">#</a> 5.2 安装过程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc pcre-devel zlib-devel openssl openssl-devel<span class="token comment">#安装依赖包 </span><span class="token number">2</span>.weget http://nginx.org/download/nginx-1.16.1.tar.gz<span class="token comment">#下载Nginx安装包</span><span class="token number">3</span>.tar <span class="token parameter variable">-zxvf</span> nginx-1.16.1.tar.gz<span class="token comment">#解压</span><span class="token number">4</span>.cd nginx-1.16.1<span class="token number">5</span><span class="token punctuation">..</span>/configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx<span class="token number">6</span>.make <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> tree<span class="token comment">#安装文件目录树形结构查看</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sbin/nginx <span class="token parameter variable">-v</span><span class="token comment">#检查版本</span>sbin/nginx <span class="token parameter variable">-t</span><span class="token comment">#检查配置文件正确性</span><span class="token comment">#启动和停止</span>./nginx<span class="token comment">#启动nginx</span>./nginx<span class="token parameter variable">-s</span> stop <span class="token comment">#停止nginx</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx<span class="token comment">#启动完成后通过此命令查看nginx进程</span><span class="token comment">#配置文件</span>./nginx <span class="token parameter variable">-s</span> reload<span class="token comment">#修改配置文件后，需要重新加载才能生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="53添加到环境变量"><a class="markdownIt-Anchor" href="#53添加到环境变量">#</a> 5.3 添加到环境变量</h3><pre class="line-numbers language-none"><code class="language-none">vim /etc/profilePATH=/usr/local/nginx/sbinsource /etc/profile#遇到的问题添加完环境变量之后，大部分命令使用不了了。解决办法：修改profile文件，将path修改成下列PATH/usr/local/nginx/sbin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="54部署项目"><a class="markdownIt-Anchor" href="#54部署项目">#</a> 5.4 部署项目</h3><pre class="line-numbers language-none"><code class="language-none">nginx.conf整体结构介绍全局块和nginx运行相关的全局配置events块和网络连接相关的配置http快代理、缓存、日志记录、虚拟主机配置http全局块server块server全局块location块注意：http块中剋配置多个server块，server块中可以配置多个location块只需将文件导入到html文件夹即可。具体yuanyin在nginx.conf中#遇到的问题如果html文件有中文会出现乱码问题在server全局快中添加charset utf-8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="55反向代理"><a class="markdownIt-Anchor" href="#55反向代理">#</a> 5.5 反向代理</h3><p>负载均衡（轮询）</p><pre class="line-numbers language-none"><code class="language-none">upstream targetserver{server 192.168.217.145:8080;server 192.168.217.145:8081; } server{listen 8080;server_name localhost;location /{proxy_pass http://targetserver;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6swagger学习"><a class="markdownIt-Anchor" href="#6swagger学习">#</a> 6.swagger 学习</h2><pre class="line-numbers language-none"><code class="language-none">操作步骤:1、导入knife4j的maven坐标2、导入knife4j相关配置类3、设置静态资源,否则接口文档页面无法访问4、在LoginChegkFilter中设置不需要处理的请求路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1、导入knife4j的maven坐标&lt;dependency&gt;&lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;&lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;3.0.2&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">2、导入knife4j相关配置类在webMvcConfig中添加注解@EnableSwagger2@EnableKnife4j创建两个方法文件地址https://www.aliyundrive.com/s/BmG7We8p3La需要注意的地方1.导入映射2.创建的两个方法中，注意controller的位置 注意项目描述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7前后端分离"><a class="markdownIt-Anchor" href="#7前后端分离">#</a> 7. 前后端分离</h2><h4 id="部署环境"><a class="markdownIt-Anchor" href="#部署环境">#</a> 部署环境</h4><pre class="line-numbers language-none"><code class="language-none">服务器:192.168.217.144 (服务器A)Nginx:部署前端项目、配置反向代理Mygql:主从复制结构中的主库192.168.217.145 (服务器B)jdk:运行Java项目git:版本控制工具maven:项目构建工具jar: Spring Boot项目打成jar包基于内置Tomcat运行Mysql:主从复制结构中的从库192.168.1.104 (服务器C)Redis:缓存中间件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="服务器a"><a class="markdownIt-Anchor" href="#服务器a">#</a> 服务器 A</h5><pre class="line-numbers language-none"><code class="language-none">1.将前端项目dist传到服务器A2.修改nginx.conf文件 server {        listen       80;        server_name  localhost;        charset utf-8;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            root   html/dist;            index  index.html;        }        #构造反向代理        location ^~ /api/ {            rewrite ^/api/(.*)$ /$1 break;            proxy_pass http://192.168.217.145:8080;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="服务器b"><a class="markdownIt-Anchor" href="#服务器b">#</a> 服务器 B</h5><pre class="line-numbers language-none"><code class="language-none">安装jdk,git,maven,MySQL,使用git克隆代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8遇到的问题"><a class="markdownIt-Anchor" href="#8遇到的问题">#</a> 8. 遇到的问题</h2><p>今天上线部署一下项目，发现 shardingsphere 无法识别 master 和 slave 下的各种配置属性，</p><p>最后发现是上面一行 name 下的两个主从库</p><p>在连接数据库的时候报 ssl 错误，添加下面的参数即可成功</p><pre class="line-numbers language-none"><code class="language-none">mysql -h 192.168.217.144 -uroot -proot --ssl-mode=DISABLED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9快速启动"><a class="markdownIt-Anchor" href="#9快速启动">#</a> 9. 快速启动</h2><pre class="line-numbers language-none"><code class="language-none">启动主库，从库（将虚拟机打开即可）启动redis启动idea访问端口http://192.168.31.152:8080/backend/index.html原理是访问项目在端口下部署的项目，即在resources下static下的backend下的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10快速创建项目"><a class="markdownIt-Anchor" href="#10快速创建项目">#</a> 10. 快速创建项目</h2><blockquote><p>数据库</p></blockquote><p>Java 中配置 maven 路径，配置 jdk,</p><p>创建前后端分离项目</p><p>导入数据库</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clash与shadowsowrocket进阶教程</title>
      <link href="/2022/10/05/clash-yu-shadowsowrocket-jin-jie-jiao-cheng/"/>
      <url>/2022/10/05/clash-yu-shadowsowrocket-jin-jie-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="clash与shadowrocket"><a class="markdownIt-Anchor" href="#clash与shadowrocket">#</a> Clash 与 Shadowrocket</h2><h3 id="1clash"><a class="markdownIt-Anchor" href="#1clash">#</a> 1.Clash</h3><p><a href="https://youtu.be/IVlnvBQXEgE">教学视频</a></p><p><a href="https://www.jamesdailylife.com/rule-proxy-provider">项目代码</a></p><h4 id="clash-for-windows"><a class="markdownIt-Anchor" href="#clash-for-windows">#</a> Clash for Windows</h4><ol><li><p>使用最新版 clash（旧版不支持 RULE-SET）</p></li><li><p>直接导入项目文件</p><p>将 url 那行改成你自己的订阅地址就可以了</p></li></ol><h3 id="2shadowrocket"><a class="markdownIt-Anchor" href="#2shadowrocket">#</a> 2.Shadowrocket</h3><p><a href="https://youtu.be/heG4YCMyg9w">教学视频</a></p><p><a href="https://github.com/h2y/Shadowrocket-ADBlock-Rules">项目代码</a></p><blockquote><h2 id="黑名单过滤-广告"><a class="markdownIt-Anchor" href="#黑名单过滤-广告">#</a> 黑名单过滤 + 广告</h2><p>黑名单中包含了境外网站中无法访问的那些，对不确定的网站则默认直连。</p><ul><li>代理：被墙的网站（GFWList）</li><li>直连：正常的网站</li><li>包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfIXs">https://git.io/JfIXs</a></p><p><a href="https://camo.githubusercontent.com/1fa7d6fa9ccba208da5b757f0467599df269354fb89b2a75ff9d08fbdae77928/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f62616e6c6973745f61642e706e673f31"><img src="https://camo.githubusercontent.com/1fa7d6fa9ccba208da5b757f0467599df269354fb89b2a75ff9d08fbdae77928/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f62616e6c6973745f61642e706e673f31" alt="二维码"></a></p><h2 id="白名单过滤-广告"><a class="markdownIt-Anchor" href="#白名单过滤-广告">#</a> 白名单过滤 + 广告</h2><p>白名单中包含了境外网站中可以访问的那些，对不确定的网站则默认代理。</p><ul><li>直连：top500 网站中可直连的境外网站、中国网站</li><li>代理：默认代理其余的所有境外网站</li><li>包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfIXo">https://git.io/JfIXo</a></p><p><a href="https://camo.githubusercontent.com/90741bd4b8259effa58ccbf3e81a600f3ca1978c873484ab3d60987821a0a7de/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f77686974656c6973745f61642e706e673f31"><img src="https://camo.githubusercontent.com/90741bd4b8259effa58ccbf3e81a600f3ca1978c873484ab3d60987821a0a7de/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f77686974656c6973745f61642e706e673f31" alt="二维码"></a></p><h2 id="黑名单过滤"><a class="markdownIt-Anchor" href="#黑名单过滤">#</a> 黑名单过滤</h2><p>现在很多浏览器都自带了广告过滤功能，而广告过滤的规则其实较为臃肿，如果你不需要全局地过滤 App 内置广告和视频广告，可以选择这个不带广告过滤的版本。</p><ul><li>代理：被墙的网站（GFWList）</li><li>直连：正常的网站</li><li>不包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfIXS">https://git.io/JfIXS</a></p><p><a href="https://camo.githubusercontent.com/1d96f1fc76c1493d86aea1fc9f20e68db671100d5294966a3e8eb29cac7202c0/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f62616e6c6973742e706e673f31"><img src="https://camo.githubusercontent.com/1d96f1fc76c1493d86aea1fc9f20e68db671100d5294966a3e8eb29cac7202c0/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f62616e6c6973742e706e673f31" alt="二维码"></a></p><h2 id="白名单过滤"><a class="markdownIt-Anchor" href="#白名单过滤">#</a> 白名单过滤</h2><p>现在很多浏览器都自带了广告过滤功能，而广告过滤的规则其实较为臃肿，如果你不需要全局地过滤 App 内置广告和视频广告，可以选择这个不带广告过滤的版本。</p><ul><li>直连：top500 网站中可直连的境外网站、中国网站</li><li>代理：默认代理其余的所有境外网站</li><li>不包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfIXh">https://git.io/JfIXh</a></p><p><a href="https://camo.githubusercontent.com/2d2a4a3ca3914f3b533c3d25f408f4fdb1445a91c990dba84fbd79083c1e8ae8/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f77686974656c6973742e706e673f31"><img src="https://camo.githubusercontent.com/2d2a4a3ca3914f3b533c3d25f408f4fdb1445a91c990dba84fbd79083c1e8ae8/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f77686974656c6973742e706e673f31" alt="二维码"></a></p><h2 id="国内外划分-广告"><a class="markdownIt-Anchor" href="#国内外划分-广告">#</a> 国内外划分 + 广告</h2><p>国内外划分，对中国网站直连，外国网站代理。包含广告过滤。国外网站总是走代理，对于某些港澳台网站，速度反而会比直连更快。</p><p>规则地址：<a href="https://git.io/JfI1k">https://git.io/JfI1k</a></p><p><a href="https://camo.githubusercontent.com/61bb403e61ff12fe61d275ad62d0f7a7bf0a12dbe10b77af9c07a3e09252e064/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f636e69705f61642e706e673f31"><img src="https://camo.githubusercontent.com/61bb403e61ff12fe61d275ad62d0f7a7bf0a12dbe10b77af9c07a3e09252e064/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f636e69705f61642e706e673f31" alt="二维码"></a></p><h2 id="国内外划分"><a class="markdownIt-Anchor" href="#国内外划分">#</a> 国内外划分</h2><p>国内外划分，对中国网站直连，外国网站代理。不包含广告过滤。国外网站总是走代理，对于某些港澳台网站，速度反而会比直连更快。</p><p>规则地址：<a href="https://git.io/JfI1q">https://git.io/JfI1q</a></p><p><a href="https://camo.githubusercontent.com/cd76618b0c57302665cfbc63dc408661ef003b4f5bada56abe84abf3c9304806/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f636e69702e706e673f31"><img src="https://camo.githubusercontent.com/cd76618b0c57302665cfbc63dc408661ef003b4f5bada56abe84abf3c9304806/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f636e69702e706e673f31" alt="二维码"></a></p><h2 id="直连去广告"><a class="markdownIt-Anchor" href="#直连去广告">#</a> 直连去广告</h2><p>如果你想将 SR 作为 iOS 全局去广告工具，这个规则会对你有所帮助。</p><ul><li>直连：所有请求</li><li>包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfI1m">https://git.io/JfI1m</a></p><p><a href="https://camo.githubusercontent.com/4798b7ebdd5f9b9e752e361a8cb8d84e8a33d0a9f2173cb69c6a2aa12ab9573c/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f6469726563745f62616e61642e706e673f31"><img src="https://camo.githubusercontent.com/4798b7ebdd5f9b9e752e361a8cb8d84e8a33d0a9f2173cb69c6a2aa12ab9573c/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f6469726563745f62616e61642e706e673f31" alt="二维码"></a></p><h2 id="代理去广告"><a class="markdownIt-Anchor" href="#代理去广告">#</a> 代理去广告</h2><p>如果你想将 SR 作为 iOS 全局去广告 + 全局翻墙工具，这个规则会对你有所帮助。</p><ul><li>直连：局域网请求</li><li>代理：其余所有请求</li><li>包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfI13">https://git.io/JfI13</a></p><p><a href="https://camo.githubusercontent.com/d7b1cd993fe13c85b47d050ba256baa54f55f1aefa94533b12fe03fcb96a3b04/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f70726f78795f62616e61642e706e673f31"><img src="https://camo.githubusercontent.com/d7b1cd993fe13c85b47d050ba256baa54f55f1aefa94533b12fe03fcb96a3b04/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f70726f78795f62616e61642e706e673f31" alt="二维码"></a></p><h2 id="回国规则"><a class="markdownIt-Anchor" href="#回国规则">#</a> 回国规则</h2><p>提供给海外华侨使用，可以回到墙内，享受国内的一些互联网服务。</p><ul><li>直连：国外网站</li><li>代理：中国网站</li><li>不包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfI1s">https://git.io/JfI1s</a></p><p><a href="https://camo.githubusercontent.com/98eba113ee12ec3f78120684203fa922afade9e416d287e22c110a98063a7574/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f6261636b636e2e706e673f31"><img src="https://camo.githubusercontent.com/98eba113ee12ec3f78120684203fa922afade9e416d287e22c110a98063a7574/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f6261636b636e2e706e673f31" alt="二维码"></a></p><h2 id="回国规则-广告"><a class="markdownIt-Anchor" href="#回国规则-广告">#</a> 回国规则 + 广告</h2><p>提供给海外华侨使用，可以回到墙内，享受国内的一些互联网服务。</p><ul><li>直连：国外网站</li><li>代理：中国网站</li><li>包含广告过滤</li></ul><p>规则地址：<a href="https://git.io/JfI1Z">https://git.io/JfI1Z</a></p><p><a href="https://camo.githubusercontent.com/b9a4bbccb92e43c94b08be64d7c71d6e9a82a3a28d65198ea5ad5ecc51fb97fa/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f6261636b636e5f61642e706e673f31"><img src="https://camo.githubusercontent.com/b9a4bbccb92e43c94b08be64d7c71d6e9a82a3a28d65198ea5ad5ecc51fb97fa/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f6261636b636e5f61642e706e673f31" alt="二维码"></a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chales抓包_羊了个羊</title>
      <link href="/2022/09/18/chales-zhua-bao-yang-liao-ge-yang/"/>
      <url>/2022/09/18/chales-zhua-bao-yang-liao-ge-yang/</url>
      
        <content type="html"><![CDATA[<h3 id="chales抓包_羊了个羊"><a class="markdownIt-Anchor" href="#chales抓包_羊了个羊">#</a> Chales 抓包_羊了个羊</h3><h5 id="打开charles的代理和手机平板上的代理"><a class="markdownIt-Anchor" href="#打开charles的代理和手机平板上的代理">#</a> 打开 Charles 的代理，和手机 / 平板上的代理</h5><ul><li><p>Charles 在 windows 和 ios 上都可以。</p></li><li><p>手机或者平板建议 ios，如果是安卓设备需要 root 才能抓到小程序的请求。</p></li></ul><h5 id="运行羊了个羊"><a class="markdownIt-Anchor" href="#运行羊了个羊">#</a> 运行羊了个羊</h5><h5 id="重新发送请求"><a class="markdownIt-Anchor" href="#重新发送请求">#</a> 重新发送请求</h5><p>map local 重定向到本地修改的文件</p><p>可以实现两个</p><ol><li>修改 personal_info 中的 daily_count 为你想要的通关次数</li><li>将第二关地图修改成第一关的地图</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/17/hello-world/"/>
      <url>/2022/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
